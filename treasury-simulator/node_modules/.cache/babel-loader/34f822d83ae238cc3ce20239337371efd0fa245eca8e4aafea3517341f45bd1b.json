{"ast":null,"code":"import{useState,useEffect}from\"react\";import\"./transfer.css\";import{useNavigate}from\"react-router-dom\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const exchangeRates={KES:{USD:0.0067,NGN:5.4},USD:{KES:150.0,NGN:810.0},NGN:{KES:27.5,USD:0.0012}};export default function TransferForm(_ref){let{fromAccount,accounts=[],onTransfer}=_ref;const[account_From,setAccount_From]=useState(\"\");const[account_To,setAccount_To]=useState(\"\");const[amount,setAmount]=useState(\"\");const[currency,setCurrency]=useState(\"\");const[date,setDate]=useState(\"\");const[comment,setComment]=useState(\"\");const navigate=useNavigate();useEffect(()=>{if(fromAccount){setAccount_From(fromAccount);}},[fromAccount]);const handleSubmit=e=>{e.preventDefault();const amountNum=parseFloat(amount);if(isNaN(amountNum)){alert(\"Amount must be a valid number.\");return;}const from=accounts.find(acc=>acc.name===account_From);if(!from){alert(\"Invalid source account.\");return;}const fromCurrency=from.currency.toUpperCase();const inputCurrency=currency.toUpperCase();let convertedAmount=amountNum;// Convert if currencies differ\nif(inputCurrency!==fromCurrency){var _exchangeRates$inputC;const rate=(_exchangeRates$inputC=exchangeRates[inputCurrency])===null||_exchangeRates$inputC===void 0?void 0:_exchangeRates$inputC[fromCurrency];if(!rate){alert(\"No exchange rate from \".concat(inputCurrency,\" to \").concat(fromCurrency));return;}convertedAmount=amountNum*rate;}if(convertedAmount>from.balance){alert(\"Insufficient balance after conversion.\");return;}const AccountData={account_From,account_To,originalAmount:amountNum,convertedAmount:convertedAmount.toFixed(2),currency:inputCurrency,convertedCurrency:fromCurrency,date,comment};fetch(\"http://localhost:5000/transactions\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify(AccountData)}).then(()=>{alert(\"Transfer successful\");onTransfer&&onTransfer(AccountData);navigate(\"/transactions\");}).catch(err=>console.error(err));};return/*#__PURE__*/_jsxs(\"div\",{className:\"Container width-60\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Transfer Form\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"account_from\",children:\"Account From:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"account_from\",value:account_From,readOnly:true}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"account_To\",children:\"Account To:\"}),/*#__PURE__*/_jsxs(\"select\",{id:\"account_To\",value:account_To,onChange:e=>setAccount_To(e.target.value),required:true,children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"--Select Account--\"}),accounts.filter(acc=>acc.name!==account_From).map(acc=>/*#__PURE__*/_jsx(\"option\",{value:acc.name,children:acc.name},acc.id))]}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"amount\",children:\"Amount:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",id:\"amount\",value:amount,onChange:e=>setAmount(e.target.value),required:true}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"currency\",children:\"Currency (of amount above):\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"currency\",value:currency,onChange:e=>setCurrency(e.target.value),placeholder:\"e.g. KES, USD, NGN\",required:true}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"date\",children:\"Date:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"date\",id:\"date\",value:date,onChange:e=>setDate(e.target.value),required:true}),/*#__PURE__*/_jsx(\"label\",{htmlFor:\"comment\",children:\"Comment:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"comment\",value:comment,onChange:e=>setComment(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"btn btn-transfer\",children:\"Transfer\"})]})]});}","map":{"version":3,"names":["useState","useEffect","useNavigate","jsx","_jsx","jsxs","_jsxs","exchangeRates","KES","USD","NGN","TransferForm","_ref","fromAccount","accounts","onTransfer","account_From","setAccount_From","account_To","setAccount_To","amount","setAmount","currency","setCurrency","date","setDate","comment","setComment","navigate","handleSubmit","e","preventDefault","amountNum","parseFloat","isNaN","alert","from","find","acc","name","fromCurrency","toUpperCase","inputCurrency","convertedAmount","_exchangeRates$inputC","rate","concat","balance","AccountData","originalAmount","toFixed","convertedCurrency","fetch","method","headers","body","JSON","stringify","then","catch","err","console","error","className","children","onSubmit","htmlFor","type","id","value","readOnly","onChange","target","required","filter","map","placeholder"],"sources":["D:/Fidelis projects/Treasury Movement Simulator/treasury-simulator/src/components/Form/TransferForm.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport \"./transfer.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nconst exchangeRates = {\r\n  KES: { USD: 0.0067, NGN: 5.4 },\r\n  USD: { KES: 150.0, NGN: 810.0 },\r\n  NGN: { KES: 27.5, USD: 0.0012 },\r\n};\r\n\r\nexport default function TransferForm({\r\n  fromAccount,\r\n  accounts = [],\r\n  onTransfer,\r\n}) {\r\n  const [account_From, setAccount_From] = useState(\"\");\r\n  const [account_To, setAccount_To] = useState(\"\");\r\n  const [amount, setAmount] = useState(\"\");\r\n  const [currency, setCurrency] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n  const [comment, setComment] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (fromAccount) {\r\n      setAccount_From(fromAccount);\r\n    }\r\n  }, [fromAccount]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const amountNum = parseFloat(amount);\r\n\r\n    if (isNaN(amountNum)) {\r\n      alert(\"Amount must be a valid number.\");\r\n      return;\r\n    }\r\n\r\n    const from = accounts.find((acc) => acc.name === account_From);\r\n    if (!from) {\r\n      alert(\"Invalid source account.\");\r\n      return;\r\n    }\r\n\r\n    const fromCurrency = from.currency.toUpperCase();\r\n    const inputCurrency = currency.toUpperCase();\r\n    let convertedAmount = amountNum;\r\n\r\n    // Convert if currencies differ\r\n    if (inputCurrency !== fromCurrency) {\r\n      const rate = exchangeRates[inputCurrency]?.[fromCurrency];\r\n      if (!rate) {\r\n        alert(`No exchange rate from ${inputCurrency} to ${fromCurrency}`);\r\n        return;\r\n      }\r\n      convertedAmount = amountNum * rate;\r\n    }\r\n\r\n    if (convertedAmount > from.balance) {\r\n      alert(\"Insufficient balance after conversion.\");\r\n      return;\r\n    }\r\n\r\n    const AccountData = {\r\n      account_From,\r\n      account_To,\r\n      originalAmount: amountNum,\r\n      convertedAmount: convertedAmount.toFixed(2),\r\n      currency: inputCurrency,\r\n      convertedCurrency: fromCurrency,\r\n      date,\r\n      comment,\r\n    };\r\n\r\n    fetch(\"http://localhost:5000/transactions\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(AccountData),\r\n    })\r\n      .then(() => {\r\n        alert(\"Transfer successful\");\r\n        onTransfer && onTransfer(AccountData);\r\n        navigate(\"/transactions\");\r\n      })\r\n      .catch((err) => console.error(err));\r\n  };\r\n\r\n  return (\r\n    <div className=\"Container width-60\">\r\n      <h2>Transfer Form</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <label htmlFor=\"account_from\">Account From:</label>\r\n        <input type=\"text\" id=\"account_from\" value={account_From} readOnly />\r\n\r\n        <label htmlFor=\"account_To\">Account To:</label>\r\n        <select\r\n          id=\"account_To\"\r\n          value={account_To}\r\n          onChange={(e) => setAccount_To(e.target.value)}\r\n          required\r\n        >\r\n          <option value=\"\">--Select Account--</option>\r\n          {accounts\r\n            .filter((acc) => acc.name !== account_From)\r\n            .map((acc) => (\r\n              <option key={acc.id} value={acc.name}>\r\n                {acc.name}\r\n              </option>\r\n            ))}\r\n        </select>\r\n\r\n        <label htmlFor=\"amount\">Amount:</label>\r\n        <input\r\n          type=\"number\"\r\n          id=\"amount\"\r\n          value={amount}\r\n          onChange={(e) => setAmount(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"currency\">Currency (of amount above):</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"currency\"\r\n          value={currency}\r\n          onChange={(e) => setCurrency(e.target.value)}\r\n          placeholder=\"e.g. KES, USD, NGN\"\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"date\">Date:</label>\r\n        <input\r\n          type=\"date\"\r\n          id=\"date\"\r\n          value={date}\r\n          onChange={(e) => setDate(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"comment\">Comment:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"comment\"\r\n          value={comment}\r\n          onChange={(e) => setComment(e.target.value)}\r\n        />\r\n\r\n        <button type=\"submit\" className=\"btn btn-transfer\">\r\n          Transfer\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}