{"ast":null,"code":"var _jsxFileName = \"D:\\\\Fidelis projects\\\\Treasury Movement Simulator\\\\treasury-simulator\\\\src\\\\components\\\\Form\\\\TransferForm.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport \"./transfer.css\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst exchangeRates = {\n  KES: {\n    USD: 0.0067,\n    NGN: 5.4\n  },\n  USD: {\n    KES: 150.0,\n    NGN: 810.0\n  },\n  NGN: {\n    KES: 27.5,\n    USD: 0.0012\n  }\n};\nexport default function TransferForm({\n  fromAccount,\n  accounts = [],\n  onTransfer\n}) {\n  _s();\n  const [account_From, setAccount_From] = useState(\"\");\n  const [account_To, setAccount_To] = useState(\"\");\n  const [amount, setAmount] = useState(\"\");\n  const [currency, setCurrency] = useState(\"\");\n  const [date, setDate] = useState(\"\");\n  const [comment, setComment] = useState(\"\");\n  const navigate = useNavigate();\n  useEffect(() => {\n    if (fromAccount) {\n      setAccount_From(fromAccount);\n    }\n  }, [fromAccount]);\n  const handleSubmit = e => {\n    e.preventDefault();\n    const amountNum = parseFloat(amount);\n    if (isNaN(amountNum)) {\n      alert(\"Amount must be a valid number.\");\n      return;\n    }\n    if (inputCurrency !== fromCurrency) {\n      var _exchangeRates$inputC;\n      const rate = (_exchangeRates$inputC = exchangeRates[inputCurrency]) === null || _exchangeRates$inputC === void 0 ? void 0 : _exchangeRates$inputC[fromCurrency];\n      if (!rate) {\n        alert(`No exchange rate from ${inputCurrency} to ${fromCurrency}`);\n        return;\n      }\n      convertedAmount = amountNum * rate;\n    }\n    const from = accounts.find(acc => acc.name === account_From);\n    if (from && amountNum > from.balance) {\n      alert(\"Insufficient balance.\");\n      return;\n    }\n    const AccountData = {\n      account_From,\n      account_To,\n      originalAmount: amountNum,\n      convertedAmount: convertedAmount.toFixed(2),\n      currency: inputCurrency,\n      convertedCurrency: fromCurrency,\n      date,\n      comment\n    };\n    fetch(\"http://localhost:5000/transactions\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(AccountData)\n    }).then(() => {\n      alert(\"Transfer successful\");\n      onTransfer && onTransfer(AccountData);\n      navigate(\"/transactions\");\n    }).catch(err => console.error(err));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Container width-60\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Transfer Form\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"account_from\",\n        children: \"Account From:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"account_from\",\n        value: account_From,\n        readOnly: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"account_To\",\n        children: \"Account To:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"account_To\",\n        value: account_To,\n        onChange: e => setAccount_To(e.target.value),\n        required: true,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"--Select Account--\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this), accounts.filter(acc => acc.name !== account_From).map(acc => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: acc.name,\n          children: acc.name\n        }, acc.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"amount\",\n        children: \"Amount:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"amount\",\n        value: amount,\n        onChange: e => setAmount(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"currency\",\n        children: \"Currency (of amount above):\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"currency\",\n        value: currency,\n        onChange: e => setCurrency(e.target.value),\n        placeholder: \"e.g. KES, USD, NGN\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"date\",\n        children: \"Date:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        id: \"date\",\n        value: date,\n        onChange: e => setDate(e.target.value),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"comment\",\n        children: \"Comment:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"comment\",\n        value: comment,\n        onChange: e => setComment(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-transfer\",\n        children: \"Transfer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(TransferForm, \"GR6WcbtqxPp+5yoeZUwr7gDdqho=\", false, function () {\n  return [useNavigate];\n});\n_c = TransferForm;\nvar _c;\n$RefreshReg$(_c, \"TransferForm\");","map":{"version":3,"names":["useState","useEffect","useNavigate","jsxDEV","_jsxDEV","exchangeRates","KES","USD","NGN","TransferForm","fromAccount","accounts","onTransfer","_s","account_From","setAccount_From","account_To","setAccount_To","amount","setAmount","currency","setCurrency","date","setDate","comment","setComment","navigate","handleSubmit","e","preventDefault","amountNum","parseFloat","isNaN","alert","inputCurrency","fromCurrency","_exchangeRates$inputC","rate","convertedAmount","from","find","acc","name","balance","AccountData","originalAmount","toFixed","convertedCurrency","fetch","method","headers","body","JSON","stringify","then","catch","err","console","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","value","readOnly","onChange","target","required","filter","map","placeholder","_c","$RefreshReg$"],"sources":["D:/Fidelis projects/Treasury Movement Simulator/treasury-simulator/src/components/Form/TransferForm.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport \"./transfer.css\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nconst exchangeRates = {\r\n  KES: { USD: 0.0067, NGN: 5.4 },\r\n  USD: { KES: 150.0, NGN: 810.0 },\r\n  NGN: { KES: 27.5, USD: 0.0012 },\r\n};\r\n\r\nexport default function TransferForm({\r\n  fromAccount,\r\n  accounts = [],\r\n  onTransfer,\r\n}) {\r\n  const [account_From, setAccount_From] = useState(\"\");\r\n  const [account_To, setAccount_To] = useState(\"\");\r\n  const [amount, setAmount] = useState(\"\");\r\n  const [currency, setCurrency] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n  const [comment, setComment] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    if (fromAccount) {\r\n      setAccount_From(fromAccount);\r\n    }\r\n  }, [fromAccount]);\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const amountNum = parseFloat(amount);\r\n\r\n    if (isNaN(amountNum)) {\r\n      alert(\"Amount must be a valid number.\");\r\n      return;\r\n    }\r\n\r\n    if (inputCurrency !== fromCurrency) {\r\n      const rate = exchangeRates[inputCurrency]?.[fromCurrency];\r\n      if (!rate) {\r\n        alert(`No exchange rate from ${inputCurrency} to ${fromCurrency}`);\r\n        return;\r\n      }\r\n      convertedAmount = amountNum * rate;\r\n    }\r\n    const from = accounts.find((acc) => acc.name === account_From);\r\n    if (from && amountNum > from.balance) {\r\n      alert(\"Insufficient balance.\");\r\n      return;\r\n    }\r\n\r\n    const AccountData = {\r\n      account_From,\r\n      account_To,\r\n      originalAmount: amountNum,\r\n      convertedAmount: convertedAmount.toFixed(2),\r\n      currency: inputCurrency,\r\n      convertedCurrency: fromCurrency,\r\n      date,\r\n      comment,\r\n    };\r\n    fetch(\"http://localhost:5000/transactions\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(AccountData),\r\n    })\r\n      .then(() => {\r\n        alert(\"Transfer successful\");\r\n        onTransfer && onTransfer(AccountData);\r\n        navigate(\"/transactions\");\r\n      })\r\n      .catch((err) => console.error(err));\r\n  };\r\n\r\n  return (\r\n    <div className=\"Container width-60\">\r\n      <h2>Transfer Form</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <label htmlFor=\"account_from\">Account From:</label>\r\n        <input type=\"text\" id=\"account_from\" value={account_From} readOnly />\r\n\r\n        <label htmlFor=\"account_To\">Account To:</label>\r\n        <select\r\n          id=\"account_To\"\r\n          value={account_To}\r\n          onChange={(e) => setAccount_To(e.target.value)}\r\n          required\r\n        >\r\n          <option value=\"\">--Select Account--</option>\r\n          {accounts\r\n            .filter((acc) => acc.name !== account_From)\r\n            .map((acc) => (\r\n              <option key={acc.id} value={acc.name}>\r\n                {acc.name}\r\n              </option>\r\n            ))}\r\n        </select>\r\n\r\n        <label htmlFor=\"amount\">Amount:</label>\r\n        <input\r\n          type=\"number\"\r\n          id=\"amount\"\r\n          value={amount}\r\n          onChange={(e) => setAmount(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"currency\">Currency (of amount above):</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"currency\"\r\n          value={currency}\r\n          onChange={(e) => setCurrency(e.target.value)}\r\n          placeholder=\"e.g. KES, USD, NGN\"\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"date\">Date:</label>\r\n        <input\r\n          type=\"date\"\r\n          id=\"date\"\r\n          value={date}\r\n          onChange={(e) => setDate(e.target.value)}\r\n          required\r\n        />\r\n\r\n        <label htmlFor=\"comment\">Comment:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"comment\"\r\n          value={comment}\r\n          onChange={(e) => setComment(e.target.value)}\r\n        />\r\n\r\n        <button type=\"submit\" className=\"btn btn-transfer\">\r\n          Transfer\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}